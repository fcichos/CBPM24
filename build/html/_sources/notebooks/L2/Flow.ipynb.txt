{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "387ddc42-8fe3-444b-87fb-9fb178da51ab",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d655a9dc-fa47-490d-a281-03ce963c6e9c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "nx = 81  # Number of grid points in x direction\n",
    "ny = 81  # Number of grid points in y direction\n",
    "nt = 100  # Number of time steps\n",
    "dx = 2 / (nx - 1)  # Spatial step in x direction  \n",
    "dy = 2 / (ny - 1)  # Spatial step in y direction\n",
    "x = np.linspace(0, 2, nx)  # X coordinates\n",
    "y = np.linspace(0, 2, ny)  # Y coordinates\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b4a05af4-d101-4e51-b6f4-229c8fbbcffb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "u = np.zeros((ny, nx))  # X velocity component\n",
    "v = np.zeros((ny, nx))  # Y velocity component\n",
    "p = np.zeros((ny, nx))  # Pressure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8779bef1-5f61-4656-93ef-50b86d6e0356",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "u[:, -1] = 1  # Set the lid velocity to 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1935772e-74c5-4dfa-a138-3b0a31feedea",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def solve_ns(u, v, p, dx, dy, dt):\n",
    "    un = u.copy()\n",
    "    vn = v.copy()\n",
    "    \n",
    "    # Compute intermediate velocity field\n",
    "    u[1:-1, 1:-1] = (un[1:-1, 1:-1] - \n",
    "                     un[1:-1, 1:-1] * dt / dx * (un[1:-1, 1:-1] - un[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (un[1:-1, 1:-1] - un[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, 0:-2]) +\n",
    "                     nu * (dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1])))\n",
    "    \n",
    "    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (vn[1:-1, 1:-1] - vn[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (vn[1:-1, 1:-1] - vn[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dy) * (p[2:, 1:-1] - p[0:-2, 1:-1]) +\n",
    "                     nu * (dt / dx**2 * (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1])))\n",
    "    \n",
    "    # Solve pressure Poisson equation\n",
    "    p = np.zeros((ny, nx))\n",
    "    p[1:-1, 1:-1] = (((p[1:-1, 2:] + p[1:-1, 0:-2]) * dy**2 + \n",
    "                      (p[2:, 1:-1] + p[0:-2, 1:-1]) * dx**2) /\n",
    "                     (2 * (dx**2 + dy**2)) -\n",
    "                     dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * \n",
    "                     ((u[1:-1, 2:] - u[1:-1, 0:-2]) / dx +\n",
    "                      (v[2:, 1:-1] - v[0:-2, 1:-1]) / dy))\n",
    "    \n",
    "    # Update velocity field\n",
    "    u[1:-1, 1:-1] = (un[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (un[1:-1, 1:-1] - un[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (un[1:-1, 1:-1] - un[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, 0:-2]) +\n",
    "                     nu * (dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1])))\n",
    "    \n",
    "    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (vn[1:-1, 1:-1] - vn[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (vn[1:-1, 1:-1] - vn[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dy) * (p[2:, 1:-1] - p[0:-2, 1:-1]) +\n",
    "                     nu * (dt / dx**2 * (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1])))\n",
    "    \n",
    "    return u, v, p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bb948d8d-502e-4473-91a8-e0e9a1c550bf",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "nu = 0.01  # Kinematic viscosity\n",
    "rho = 1    # Density\n",
    "dt = 0.001 # Time step\n",
    "\n",
    "for n in range(nt):\n",
    "    un = u.copy()\n",
    "    vn = v.copy()\n",
    "    \n",
    "    u, v, p = solve_ns(u, v, p, dx, dy, dt)\n",
    "    \n",
    "    # Apply boundary conditions\n",
    "    u[:, -1] = 1\n",
    "    u[:, 0] = 0\n",
    "    u[0, :] = 0 \n",
    "    u[-1, :] = 0\n",
    "    v[:, -1] = 0\n",
    "    v[:, 0] = 0  \n",
    "    v[0, :] = 0\n",
    "    v[-1, :] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5c1558a0-f7df-4950-9c03-c2496c4d6eb7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "ax.quiver(x[::2], y[::2], u[::2, ::2], v[::2, ::2])\n",
    "ax.set_xlabel('X')\n",
    "ax.set_ylabel('Y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "495be7c2-be51-4697-be2f-4119f62a01b3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'float' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[8], line 108\u001b[0m\n\u001b[1;32m    105\u001b[0m                 v[i, j] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m    107\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m6\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[0;32m--> 108\u001b[0m ax\u001b[38;5;241m.\u001b[39mquiver(\u001b[43mx\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m]\u001b[49m, y[::\u001b[38;5;241m2\u001b[39m], u[::\u001b[38;5;241m2\u001b[39m, ::\u001b[38;5;241m2\u001b[39m], v[::\u001b[38;5;241m2\u001b[39m, ::\u001b[38;5;241m2\u001b[39m])\n\u001b[1;32m    109\u001b[0m circle \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39mCircle((circle_x, circle_y), circle_r, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m, fill\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m    110\u001b[0m ax\u001b[38;5;241m.\u001b[39madd_artist(circle)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'float' object is not subscriptable"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the computational domain and parameters\n",
    "nx = 81  # Number of grid points in x direction\n",
    "ny = 81  # Number of grid points in y direction  \n",
    "nt = 100  # Number of time steps\n",
    "dx = 2 / (nx - 1)  # Spatial step in x direction\n",
    "dy = 2 / (ny - 1)  # Spatial step in y direction\n",
    "x = np.linspace(0, 2, nx)  # X coordinates\n",
    "y = np.linspace(0, 2, ny)  # Y coordinates\n",
    "\n",
    "# Initialize arrays for the velocity components and pressure\n",
    "u = np.zeros((ny, nx))  # X velocity component\n",
    "v = np.zeros((ny, nx))  # Y velocity component\n",
    "p = np.zeros((ny, nx))  # Pressure\n",
    "\n",
    "# Set the boundary conditions (e.g. lid-driven cavity flow)\n",
    "u[:, -1] = 1  # Set the lid velocity to 1\n",
    "\n",
    "# Define the circle geometry\n",
    "circle_x = 1  # X-coordinate of circle center\n",
    "circle_y = 1  # Y-coordinate of circle center\n",
    "circle_r = 0.25  # Radius of the circle\n",
    "\n",
    "# Create a mask to identify fluid and solid cells\n",
    "mask = np.zeros((ny, nx), dtype=bool)\n",
    "for i in range(ny):\n",
    "    for j in range(nx):\n",
    "        x = j * dx\n",
    "        y = i * dy\n",
    "        if (x - circle_x)**2 + (y - circle_y)**2 > circle_r**2:\n",
    "            mask[i, j] = True\n",
    "\n",
    "def solve_ns(u, v, p, dx, dy, dt):\n",
    "    un = u.copy()\n",
    "    vn = v.copy()\n",
    "    \n",
    "    # Compute intermediate velocity field\n",
    "    u[1:-1, 1:-1] = (un[1:-1, 1:-1] - \n",
    "                     un[1:-1, 1:-1] * dt / dx * (un[1:-1, 1:-1] - un[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (un[1:-1, 1:-1] - un[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, 0:-2]) +\n",
    "                     nu * (dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1])))\n",
    "    \n",
    "    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (vn[1:-1, 1:-1] - vn[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (vn[1:-1, 1:-1] - vn[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dy) * (p[2:, 1:-1] - p[0:-2, 1:-1]) +\n",
    "                     nu * (dt / dx**2 * (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1])))\n",
    "    \n",
    "    # Solve pressure Poisson equation\n",
    "    p = np.zeros((ny, nx))\n",
    "    p[1:-1, 1:-1] = (((p[1:-1, 2:] + p[1:-1, 0:-2]) * dy**2 + \n",
    "                      (p[2:, 1:-1] + p[0:-2, 1:-1]) * dx**2) /\n",
    "                     (2 * (dx**2 + dy**2)) -\n",
    "                     dx**2 * dy**2 / (2 * (dx**2 + dy**2)) * \n",
    "                     ((u[1:-1, 2:] - u[1:-1, 0:-2]) / dx +\n",
    "                      (v[2:, 1:-1] - v[0:-2, 1:-1]) / dy))\n",
    "    \n",
    "    # Update velocity field\n",
    "    u[1:-1, 1:-1] = (un[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (un[1:-1, 1:-1] - un[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (un[1:-1, 1:-1] - un[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dx) * (p[1:-1, 2:] - p[1:-1, 0:-2]) +\n",
    "                     nu * (dt / dx**2 * (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1])))\n",
    "    \n",
    "    v[1:-1, 1:-1] = (vn[1:-1, 1:-1] -\n",
    "                     un[1:-1, 1:-1] * dt / dx * (vn[1:-1, 1:-1] - vn[1:-1, 0:-2]) -\n",
    "                     vn[1:-1, 1:-1] * dt / dy * (vn[1:-1, 1:-1] - vn[0:-2, 1:-1]) -\n",
    "                     dt / (2 * rho * dy) * (p[2:, 1:-1] - p[0:-2, 1:-1]) +\n",
    "                     nu * (dt / dx**2 * (vn[1:-1, 2:] - 2 * vn[1:-1, 1:-1] + vn[1:-1, 0:-2]) +\n",
    "                           dt / dy**2 * (vn[2:, 1:-1] - 2 * vn[1:-1, 1:-1] + vn[0:-2, 1:-1])))\n",
    "    \n",
    "    return u, v, p\n",
    "\n",
    "nu = 0.01  # Kinematic viscosity\n",
    "rho = 1    # Density\n",
    "dt = 0.001 # Time step\n",
    "\n",
    "for n in range(nt):\n",
    "    un = u.copy()\n",
    "    vn = v.copy()\n",
    "    \n",
    "    u, v, p = solve_ns(u, v, p, dx, dy, dt)\n",
    "    \n",
    "    # Apply boundary conditions\n",
    "    u[:, -1] = 1\n",
    "    u[:, 0] = 0\n",
    "    u[0, :] = 0 \n",
    "    u[-1, :] = 0\n",
    "    v[:, -1] = 0\n",
    "    v[:, 0] = 0  \n",
    "    v[0, :] = 0\n",
    "    v[-1, :] = 0\n",
    "    \n",
    "    # Apply boundary conditions for the circle\n",
    "    for i in range(ny):\n",
    "        for j in range(nx):\n",
    "            if not mask[i, j]:\n",
    "                u[i, j] = 0\n",
    "                v[i, j] = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "ax.quiver(x[::2], y[::2], u[::2, ::2], v[::2, ::2])\n",
    "circle = plt.Circle((circle_x, circle_y), circle_r, color='r', fill=False)\n",
    "ax.add_artist(circle)\n",
    "ax.set_xlim(0, 2)\n",
    "ax.set_ylim(0, 2)\n",
    "ax.set_xlabel('X')\n",
    "ax.set_ylabel('Y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07acdb21-64eb-4e22-a52d-982add1a3711",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
